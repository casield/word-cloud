{"version":3,"sources":["components/UIPanel.tsx","components/WordTable.tsx","components/WordsDisplay.tsx","components/RightConfiguration.tsx","App.tsx","reportWebVitals.js","index.tsx"],"names":["UIPanel","props","borderRadius","backgroundColor","border","borderColor","boxShadow","margin","padding","children","randomInt","min","max","Math","round","random","WordTable","useState","words","setWords","useEffect","onChange","overflow","flexDirection","maxH","MenuWordTable","marginTop","w","flexWrap","map","index","TWord","word","newW","mwords","onDelete","splice","colorScheme","leftIcon","onClick","text","length","times","MenuDeleteAll","UploadCSV","refF","useRef","file","document","querySelector","console","log","value","type","className","ref","accept","display","e","target","files","reader","FileReader","onload","evt","ar","currentTarget","result","split","b","replace","Number","readAsText","visibility","current","click","cancelRef","useDisclosure","isOpen","onOpen","onClose","leastDestructiveRef","motionPreset","isCentered","ml","setText","setTimes","maxW","onContextMenu","preventDefault","gridTemplateColumns","marginY","v","paddingLeft","textAlign","fontWeight","num","parseInt","isNaN","WordsDisplay","componentRef","setComponentRef","sorted","Word","colors","font","fontSize","shape","bgColor","color","biggest","arr","sort","a","width","offsetWidth","maxSize","WordCloud","list","gridSize","weightFactor","size","weight","distance","theta","findIndex","shuffle","fontFamily","rotateRatio","alignItems","justifyContent","maxHeight","maxWidth","onResizeStop","defaultSize","height","position","h","background","RightConfiguration","flexDir","allowMultiple","ColoresItem","FuenteItem","ShapeItem","ExportItem","MenuItem","icon","title","SubMenuTitle","selected","setSelected","colorGradient","Gradient","setMidpoint","setGradient","getArray","setColors","c","Color","JSON","stringify","GradiantePersonalizado","x","cursor","setColor","BgColorPersonalizado","deg","forEach","hex","color1","setColor1","color2","setColor2","active","setActive","grad","Col","useCallback","setFont","setFontSize","valueAsNumber","marginLeft","setShape","date","Date","d","getDay","getMonth","getFullYear","exportComponentAsPNG","fileName","html2CanvasOptions","Left","gridTemplateRows","App","templateColumns","minH","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.acdb0bc6.chunk.js","sourcesContent":["import { Box, BoxProps, Flex, FlexProps, propNames } from \"@chakra-ui/react\";\r\n\r\nexport default function UIPanel(props:FlexProps){\r\nreturn (<Flex borderRadius=\"md\" backgroundColor=\"white\" border=\"1px\" borderColor=\"blackAlpha.500\" boxShadow=\"md\" margin={2} padding={1} {...props}>\r\n    {props.children}\r\n    </Flex>)\r\n}","import { AlertDialog, AlertDialogBody, AlertDialogCloseButton, AlertDialogContent, AlertDialogFooter, AlertDialogHeader, AlertDialogOverlay, Box, Button, Center, Editable, EditableInput, EditablePreview, Flex, Grid, HStack, Input, Popover, PopoverContent, PopoverTrigger, useDisclosure, useEditableControls, useOutsideClick, VStack, Wrap } from \"@chakra-ui/react\";\r\nimport { useEffect, useRef, useState } from \"react\";\r\nimport UIPanel from \"./UIPanel\";\r\nimport { CgAddR } from \"react-icons/cg\"\r\nimport { AiOutlineCloudUpload, AiOutlineDelete, AiOutlineMenu } from \"react-icons/ai\"\r\n\r\nexport interface WordTableProps {\r\n    words?: IWord[];\r\n    onChange: (words: IWord[]) => void\r\n}\r\nexport interface TWordProps {\r\n    word: IWord;\r\n    onChange?: (word: IWord) => void,\r\n    onDelete?: () => void\r\n}\r\nexport interface IWord {\r\n    text: string,\r\n    times: number;\r\n}\r\nfunction randomInt(min: number, max: number) {\r\n    return Math.round(Math.random() * (max - min) + min);\r\n}\r\n\r\nexport default function WordTable(props: WordTableProps) {\r\n    const [words, setWords] = useState<IWord[]>([])\r\n\r\n    useEffect(() => {\r\n        props.onChange(words);\r\n    }, [words])\r\n\r\n\r\n    return (<UIPanel overflow=\"hidden\" flexDirection=\"column\" maxH=\"30vh\">\r\n        <MenuWordTable words={{ words, setWords }}></MenuWordTable>\r\n\r\n        <Wrap padding={1} marginTop={2} w=\"full\" flexDirection=\"row\" flexWrap=\"wrap\" overflow=\"auto\">\r\n            {words.map((w, index) => <TWord key={index} word={w} onChange={(newW) => {\r\n                let mwords = [...words]\r\n                mwords[index] = newW;\r\n                setWords(mwords);\r\n            }}\r\n                onDelete={() => {\r\n                    let mwords = [...words]\r\n                    mwords.splice(index, 1);\r\n                    setWords(mwords);\r\n                }}\r\n            ></TWord>)}\r\n        </Wrap>\r\n\r\n\r\n\r\n    </UIPanel>)\r\n}\r\ninterface MenuWordTable {\r\n    words: { words: IWord[], setWords: React.Dispatch<React.SetStateAction<IWord[]>> }\r\n}\r\nfunction MenuWordTable(props: MenuWordTable) {\r\n    let max = 10000;\r\n    let min = 1;\r\n    return <HStack backgroundColor=\"blackAlpha.200\" borderRadius=\"md\" padding={2}>\r\n        <Box padding={2}><AiOutlineMenu ></AiOutlineMenu></Box>\r\n        <Button margin={1} colorScheme=\"green\" leftIcon={<CgAddR></CgAddR>} onClick={() => { props.words.setWords([...props.words.words, { text: \"Palabra \" + (props.words.words.length + 1), times: randomInt(min, max) }]) }}>\r\n            {\"Agregar palabra\"}\r\n        </Button>\r\n        <MenuDeleteAll {...props}></MenuDeleteAll>\r\n        <UploadCSV {...props}></UploadCSV>\r\n    </HStack>\r\n}\r\nfunction UploadCSV(props: MenuWordTable) {\r\n    const refF = useRef<HTMLInputElement>(null);\r\n    useEffect(() => {\r\n\r\n        const file = document.querySelector('.file') as HTMLInputElement;\r\n        if(file!=null){\r\n            console.log(\"Deleted\")\r\n            file.value = ''\r\n        }\r\n        \r\n\r\n\r\n    }, [props.words.words])\r\n    return (<Box>\r\n       <form>\r\n       <Input type={\"file\"} className=\"file\" ref={refF} accept={\".CSV\"} display={\"none\"} onChange={e => {\r\n\r\n            if (e.target.files) {\r\n                let file = e.target.files[0];\r\n                const reader = new FileReader()\r\n\r\n                reader.onload = function (evt) {\r\n                    let res: string = (evt.currentTarget as any).result;\r\n\r\n                    let spaces = res.split(\"\\n\")\r\n                    let ar = spaces.map(e => {\r\n                        let b = e.replace(\"\\r\", \"\").split(\",\");\r\n                        let word: IWord = { text: b[1], times: Number(b[0]) }\r\n                        return word;\r\n                    })\r\n                    props.words.setWords(ar);\r\n                }\r\n\r\n                reader.readAsText(file);\r\n\r\n\r\n            }\r\n\r\n        }} visibility={\"hidden\"}></Input>\r\n       </form>\r\n        <Button colorScheme={\"whatsapp\"} onClick={(e) => {\r\n            if (refF.current?.click) {\r\n                refF?.current?.click();\r\n            }\r\n\r\n        }} leftIcon={<AiOutlineCloudUpload />}>Subir archivo .CSV</Button>\r\n    </Box>)\r\n}\r\nfunction MenuDeleteAll(props: MenuWordTable) {\r\n    const cancelRef = useRef(null)\r\n    const { isOpen, onOpen, onClose } = useDisclosure()\r\n    return (<><Button margin={1} colorScheme=\"red\" leftIcon={<AiOutlineDelete></AiOutlineDelete>} onClick={() => { onOpen() }}>\r\n        {\"Eliminar todas las palabras\"}\r\n    </Button>\r\n        <AlertDialog leastDestructiveRef={cancelRef}\r\n            motionPreset=\"slideInBottom\"\r\n            onClose={onClose}\r\n            isOpen={isOpen}\r\n            isCentered\r\n        >\r\n            <AlertDialogOverlay />\r\n\r\n            <AlertDialogContent>\r\n                <AlertDialogHeader>¿Realmente deseas eliminar todas las palabras?</AlertDialogHeader>\r\n                <AlertDialogCloseButton />\r\n\r\n                <AlertDialogFooter>\r\n                    <Button ref={cancelRef} onClick={onClose}>\r\n                        No\r\n                    </Button>\r\n                    <Button colorScheme=\"red\" onClick={() => { props.words.setWords([]); onClose() }} ml={3}>\r\n                        Si\r\n                    </Button>\r\n                </AlertDialogFooter>\r\n            </AlertDialogContent>\r\n        </AlertDialog>\r\n    </>)\r\n}\r\nexport function TWord(props: TWordProps) {\r\n    const [text, setText] = useState(props.word.text);\r\n    const [times, setTimes] = useState(props.word.times);\r\n\r\n\r\n    useEffect(() => {\r\n        setTimes(props.word.times)\r\n        setText(props.word.text)\r\n    }, [props.word])\r\n\r\n\r\n    return (\r\n        <Grid backgroundColor=\"green.50\" maxW={\"300px\"} onContextMenu={(e) => {\r\n            e.preventDefault()\r\n            if (props.onDelete) {\r\n                props.onDelete();\r\n            }\r\n        }} borderRadius=\"md\" border=\"1px solid\" borderColor=\"blackAlpha.500\" padding={1} gridTemplateColumns=\"1fr .5fr\" marginY={1}>\r\n            <Input value={text} backgroundColor=\"white\" onChange={(v) => {\r\n                if (props.onChange) {\r\n                    setText(v.target.value);\r\n                    props.onChange({ text: v.target.value, times })\r\n                }\r\n            }}>\r\n\r\n            </Input>\r\n            <Box paddingLeft={1}>\r\n                <Input textAlign=\"center\" backgroundColor=\"white\" fontWeight=\"semibold\" value={times} onChange={(v) => {\r\n                    let num = Number.parseInt(v.target.value)\r\n                    if (!isNaN(num)) {\r\n                        setTimes(num);\r\n                        if (props.onChange) {\r\n                            props.onChange({ text: text, times: num })\r\n                        }\r\n\r\n                    } else {\r\n                        setTimes(0)\r\n                    }\r\n\r\n\r\n\r\n                }}>\r\n                </Input>\r\n            </Box>\r\n        </Grid>\r\n    )\r\n}","import { Box, Button, Flex } from \"@chakra-ui/react\";\r\n\r\nimport React, { LegacyRef, MutableRefObject, ReactInstance, useEffect, useRef, useState } from \"react\";\r\nimport { exportComponentAsPNG } from \"react-component-export-image\";\r\nimport Word from \"./Word\";\r\nimport { IWord, WordTableProps } from \"./WordTable\";\r\nimport WordCloud from \"wordcloud\";\r\nimport { reduce } from \"lodash\";\r\nimport { Resizable } from \"re-resizable\";\r\nimport { AppProps } from \"../App\";\r\n\r\n\r\n\r\nexport default function WordsDisplay(props: AppProps) {\r\n    const [words, setWords] = useState<IWord[]>([])\r\n    const ref = useRef<HTMLDivElement>(null)\r\n    let containerSize = \"65vh\"\r\n    useEffect(()=>{\r\n        props.componentRef.setComponentRef(ref);\r\n    },[ref])\r\n    useEffect(() => {\r\n        let sorted = props.words.words\r\n        setWords(sorted)\r\n        Word(sorted);\r\n    }, [props.words.words, props.colors.colors,props.font.font,props.fontSize.fontSize,props.shape.shape,props.bgColor.color])\r\n    const Word = (words: IWord[]) => {\r\n        if (ref.current != null) {\r\n            let biggest = 0;\r\n            let sorted = [...words].sort((a, b) => {\r\n                if (a.times < b.times) {\r\n                    return 1;\r\n                }\r\n                if (a.times > b.times) {\r\n                    return -1\r\n                }\r\n                return 0;\r\n            })\r\n            let arr = sorted.map((w) => {\r\n                if (w.times > biggest) {\r\n                    biggest = w.times;\r\n                }\r\n                return [w.text, w.times]\r\n            })\r\n            let width = ref.current.offsetWidth;\r\n            let maxSize = props.fontSize.fontSize;\r\n            WordCloud(ref.current,\r\n                {\r\n                    list: arr,\r\n                    gridSize: Math.round(16 * width / 1024),\r\n\r\n                    weightFactor: function (size) {\r\n                        let porcentage = (size / biggest)\r\n                        let porcOfMaxSize = maxSize * porcentage;\r\n\r\n\r\n\r\n                        return porcOfMaxSize;\r\n                    },\r\n                    color: (word, weight, fontSize, distance, theta) => {\r\n                        let index = words.findIndex(e => e.text == word);\r\n                        return props.colors.colors[index]\r\n                    },\r\n                    shape:props.shape.shape,\r\n                    shuffle:true,\r\n                    fontFamily:props.font.font,\r\n                    backgroundColor:props.bgColor.color,\r\n\r\n                    rotateRatio: 0,\r\n\r\n                })\r\n            console.log(\"Word Cloud\", ref.current.offsetWidth)\r\n        }\r\n    }\r\n    return (<Flex alignItems=\"center\" justifyContent=\"center\" maxH={containerSize} padding={1}>\r\n        <Resizable maxHeight={\"100%\"} maxWidth={\"100%\"} onResizeStop={() => { Word(props.words.words) }}\r\n            defaultSize={{\r\n                width: 500,\r\n                height: 400,\r\n            }}\r\n        >\r\n\r\n            <Box border=\"1px\" position=\"relative\" overflow=\"hidden\" borderColor=\"blackAlpha.500\"\r\n              backgroundColor=\"white\" h=\"full\" w=\"full\" borderRadius=\"md\">\r\n                 <Box h=\"full\" w=\"full\" background=\"transparent\" ref={ref}></Box>\r\n             </Box>\r\n\r\n        </Resizable>\r\n    </Flex>)\r\n}","import { Flex, Box, Accordion, AccordionItem, AccordionButton, AccordionPanel, HStack, Wrap, VStack, propNames, Input, Button, Popover, PopoverArrow, PopoverBody, PopoverCloseButton, PopoverContent, PopoverHeader, PopoverTrigger, Center, Divider } from \"@chakra-ui/react\";\r\nimport { ReactElement, useState } from \"react\";\r\nimport { AiOutlineBgColors, AiOutlineFontColors, AiOutlineFontSize } from \"react-icons/ai\";\r\nimport { CgColorPicker } from 'react-icons/cg'\r\nimport { IoShapesOutline } from 'react-icons/io5'\r\nimport { BiExport } from 'react-icons/bi'\r\nimport { AppProps } from \"../App\";\r\nimport UIPanel from \"./UIPanel\";\r\nimport Gradient from \"javascript-color-gradient\";\r\nimport { useEffect } from \"react\";\r\nimport { SketchPicker } from \"react-color\";\r\nimport { useCallback } from \"react\";\r\nimport { exportComponentAsPDF, exportComponentAsPNG } from \"react-component-export-image\";\r\n\r\n\r\nexport default function RightConfiguration(props: AppProps) {\r\n    return (<Box maxH=\"100vh\">\r\n        <UIPanel flexDir=\"column\" maxH=\"90%\">\r\n            <Box borderRadius=\"lg\" color=\"white\" textAlign=\"center\" backgroundColor=\"black\" fontWeight=\"semibold\" padding={1}>\r\n                Configuración\r\n            </Box>\r\n            <Accordion marginTop={2} allowMultiple={false} overflow=\"auto\" maxH=\"95%\">\r\n                <ColoresItem {...props}></ColoresItem>\r\n                <FuenteItem {...props}></FuenteItem>\r\n                <ShapeItem {...props}></ShapeItem>\r\n                <ExportItem {...props}></ExportItem>\r\n\r\n            </Accordion>\r\n\r\n        </UIPanel>\r\n    </Box>)\r\n\r\n}\r\ninterface MenuItemProps {\r\n    children?: ReactElement | ReactElement[];\r\n    icon?: ReactElement;\r\n    title: string;\r\n\r\n}\r\nexport function MenuItem(props: MenuItemProps) {\r\n    return (<AccordionItem>\r\n        <AccordionButton fontWeight=\"semibold\" fontSize=\"md\">\r\n            <HStack>\r\n                {props.icon && props.icon}\r\n                <Box>{props.title}</Box>\r\n            </HStack>\r\n        </AccordionButton>\r\n        <AccordionPanel>{props.children ? props.children : \"...\"}</AccordionPanel>\r\n    </AccordionItem>)\r\n}\r\nexport function SubMenuTitle(props: { children: string }) {\r\n    return <Box fontSize=\"sm\" fontWeight=\"semibold\" color=\"gray.500\">{props.children}</Box>\r\n}\r\n\r\nexport function ColoresItem(props: AppProps) {\r\n\r\n    let colors = [[\"#731131\", \"#B1163C\", \"#965F2F\", \"#C19554\", \"#E1CA9F\"],\r\n    [\"#FFFFFF\",\"#000000\"],\r\n    [\"#FFF800\", \"#8BC2E3\"],[\"#a8ff78\",\"#78ffd6\"],[\"#ee9ca7\",\"#ffdde1\"],\r\n    [\"#ED213A\",\"#93291E\"],[\"#11998e\",\"#38ef7d\"],[\"#3C3B3F\",\"#605C3C\"],\r\n    [\"#000000\",\"#0f9b0f\"],[\"#000046\",\"#1CB5E0\"],[\"#141E30\",\"#243B55\"]\r\n]\r\n    const [selected, setSelected] = useState<string[]>(colors[0])\r\n\r\n\r\n    useEffect(() => {\r\n        if (selected?.length > 1) {\r\n            const colorGradient = new Gradient();\r\n            colorGradient.setMidpoint(props.words.words.length);\r\n\r\n\r\n            colorGradient.setGradient(...selected);\r\n            console.log(\"Gradient\", colorGradient.getArray())\r\n\r\n            props.colors.setColors(colorGradient.getArray())\r\n        }\r\n\r\n\r\n    }, [props.words.words, selected])\r\n\r\n    return (<MenuItem title=\"Colores\" icon={<CgColorPicker />}>\r\n        <VStack alignItems=\"start\">\r\n            <SubMenuTitle>Color de la letra</SubMenuTitle>\r\n            <Wrap>\r\n                {colors.map(c => <Color onClick={(c) => setSelected(c)} selected={JSON.stringify(c) == JSON.stringify(selected)} colors={c} ></Color>)}\r\n            </Wrap>\r\n            <GradiantePersonalizado {...props}></GradiantePersonalizado>\r\n            <Divider></Divider>\r\n            <SubMenuTitle>Color de fondo</SubMenuTitle>\r\n            <Wrap>\r\n                {colors.map(c=>c.map(x=>{\r\n                    return <Box w={\"20px\"} cursor=\"pointer\" border={props.bgColor.color==x?\"2px\":\"none\"} onClick={()=>{props.bgColor.setColor(x)}} h=\"20px\" backgroundColor={x}></Box>\r\n                }))}\r\n            </Wrap>\r\n            <BgColorPersonalizado {...props}></BgColorPersonalizado>\r\n            \r\n        </VStack>\r\n\r\n    </MenuItem>)\r\n}\r\nfunction Color(props: { colors: string[], selected: boolean, onClick: (c: string[]) => any }) {\r\n    let size = \"30px\"\r\n    let deg = \"\"\r\n    props.colors.forEach((e, index) => {\r\n        deg += e;\r\n        if (index < props.colors.length - 1) {\r\n            deg += \", \";\r\n        }\r\n    })\r\n\r\n\r\n    return (<Box cursor=\"pointer\" w={size} borderRadius=\"full\" onClick={() => { props.onClick(props.colors) }} h={size} border={props.selected ? \"2px\" : \"0px\"} borderColor={props.selected ? \"black\" : \"none\"} background={\"linear-gradient(to right,\" + deg + \")\"}></Box>)\r\n}\r\nfunction BgColorPersonalizado(props:AppProps){\r\n    const [active, setActive] = useState(false);\r\n    return (<>\r\n    <Popover>\r\n            <PopoverTrigger>\r\n              <Center w=\"full\"> <Button colorScheme=\"yellow\" size=\"sm\">Seleccionar color</Button></Center>\r\n            </PopoverTrigger>\r\n            <PopoverContent>\r\n                <PopoverArrow />\r\n                <PopoverCloseButton />\r\n                <PopoverHeader>Selecciona un color</PopoverHeader>\r\n                <PopoverBody><Center><SketchPicker color={props.bgColor.color} onChange={(e) => { props.bgColor.setColor(e.hex) }} /></Center></PopoverBody>\r\n            </PopoverContent>\r\n        </Popover>\r\n    </>)\r\n}\r\nfunction GradiantePersonalizado(props: AppProps) {\r\n    const [color1, setColor1] = useState(\"#000000\")\r\n    const [color2, setColor2] = useState(\"#BBFFFF\")\r\n    const [active, setActive] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if (active) {\r\n            let grad = new Gradient()\r\n            grad.setGradient(color1, color2);\r\n            grad.setMidpoint(props.words.words.length);\r\n            props.colors.setColors(grad.getArray())\r\n        }\r\n    }, [active, color1, color2])\r\n    const Col = useCallback((props: { color: string, setColor: React.Dispatch<React.SetStateAction<string>> }) => {\r\n        return <Popover>\r\n            <PopoverTrigger>\r\n                <Box border=\"2px\" cursor=\"pointer\" backgroundColor={props.color} w={size} h={size}></Box>\r\n            </PopoverTrigger>\r\n            <PopoverContent>\r\n                <PopoverArrow />\r\n                <PopoverCloseButton />\r\n                <PopoverHeader>Selecciona un color</PopoverHeader>\r\n                <PopoverBody><Center><SketchPicker color={props.color} onChange={(e) => { props.setColor(e.hex) }} /></Center></PopoverBody>\r\n            </PopoverContent>\r\n        </Popover>\r\n    }, [])\r\n    let size = 5;\r\n    return (<>\r\n    \r\n        {active && <Flex w=\"full\" alignItems=\"center\" justifyContent=\"center\">\r\n\r\n            <Col color={color1} setColor={setColor1}></Col>\r\n            <Box w={\"150px\"} h={size - 2} background={\"linear-gradient(to right,\" + color1 + \",\" + color2 + \")\"}></Box>\r\n            <Col color={color2} setColor={setColor2}></Col>\r\n        </Flex>}\r\n\r\n        {<Center w=\"full\"><Button size=\"sm\" onClick={() => { setActive(!active) }} colorScheme=\"yellow\">{!active ? \"Colores personalizados\" : \"Cancelar\"}</Button></Center>}\r\n    </>)\r\n}\r\nexport function FuenteItem(props: AppProps) {\r\n    const fuentes = [\"Calibri\", \"Arial\", \"New Times Roman\",\"Courier New\",\"Verdana\",\"Georgia\",\"Palatino\",\"Bookman\",\"Tahoma\",\"Impact\",\"Comic Sans MS\",\"\"]\r\n\r\n    return (<MenuItem title=\"Fuente\" icon={<AiOutlineFontSize />}>\r\n        <VStack alignItems=\"start\">\r\n            <SubMenuTitle>Tipo de fuente</SubMenuTitle>\r\n            <Wrap>{fuentes.map((e) => {\r\n                return (<Box border=\"1px\" borderColor={props.font?.font == e ? \"gray.600\" : \"gray.300\"} padding={1} borderRadius=\"md\" cursor=\"pointer\" onClick={() => { props.font.setFont(e) }} fontWeight={props.font?.font == e ? \"bold\" : \"normal\"} fontFamily={e}>{e}</Box>)\r\n            })}</Wrap>\r\n            <Divider></Divider>\r\n            <SubMenuTitle>Tamaño máximo de la fuente</SubMenuTitle>\r\n            <Flex justifyContent=\"end\">\r\n                <Input type={\"number\"} w=\"40%\" value={props.fontSize.fontSize} onChange={(e:any) => { props.fontSize.setFontSize(e.target.valueAsNumber) }}></Input>\r\n                <Box h=\"full\" marginLeft={1} fontSize=\"sm\" color=\"gray.700\" fontWeight=\"bold\">pts.</Box>\r\n            </Flex>\r\n        </VStack>\r\n    </MenuItem>)\r\n}\r\nexport function ShapeItem(props: AppProps) {\r\n    const shapes = [\"circle\", \"square\", \"star\", \"cardioid\", \"triangle-forward\", \"triangle\", \"pentagon\"]\r\n    return (<MenuItem title=\"Forma\" icon={<IoShapesOutline />}>\r\n        <Wrap>\r\n            {shapes.map(e => (<Box border=\"1px\" borderColor={props.shape?.shape == e ? \"gray.600\" : \"gray.300\"} padding={1} borderRadius=\"md\" cursor=\"pointer\" onClick={() => { props.shape.setShape(e) }} fontWeight={props.shape?.shape == e ? \"bold\" : \"normal\"} >{e}</Box>))}\r\n        </Wrap>\r\n    </MenuItem>)\r\n}\r\nexport function ExportItem(props: AppProps) {\r\n    return (<MenuItem title=\"Exportar\" icon={<BiExport />}>\r\n      <VStack>\r\n      <Box><Button colorScheme=\"orange\" onClick={() => {\r\n            let date = new Date();\r\n            let d = (date.getDay() + \"-\" + date.getMonth() + \"-\" + date.getFullYear());\r\n            exportComponentAsPNG(props.componentRef.componentRef, { fileName: (\"WordCloud \" + d), html2CanvasOptions: { backgroundColor: \"transparent\" } })\r\n        }}>Exportar como PNG</Button></Box>\r\n      </VStack>\r\n    </MenuItem>)\r\n}","import logo from './logo.svg';\nimport './App.css';\nimport { Box, Container, Flex, Grid } from '@chakra-ui/react';\nimport WordTable, { IWord } from './components/WordTable';\nimport WordsDisplay from './components/WordsDisplay';\nimport React, { useState } from 'react';\nimport RightConfiguration from './components/RightConfiguration';\nexport interface AppProps {\n  words: { words: IWord[], setWords: React.Dispatch<React.SetStateAction<IWord[]>> }\n  colors:{colors:string[],setColors:React.Dispatch<React.SetStateAction<string[]>>}\n  font:{font:string,setFont:React.Dispatch<React.SetStateAction<string>>}\n \n  fontSize:{fontSize:number,setFontSize:React.Dispatch<React.SetStateAction<number>>}\n  shape:{shape:string,setShape:React.Dispatch<React.SetStateAction<string>>}\n  bgColor:{color:string,setColor:React.Dispatch<React.SetStateAction<string>>}\n  componentRef:{componentRef:React.RefObject<HTMLElement>,setComponentRef:React.Dispatch<React.SetStateAction<React.RefObject<HTMLElement>|undefined>>}\n}\nfunction App() {\n  const [words, setWords] = useState<IWord[]>([])\n  const [colors, setColors] = useState<string[]>([])\n  const [font,setFont] = useState<string>(\"Calibri\");\n  const [shape,setShape] = useState<string>(\"circle\");\n  const [color,setColor] = useState<string>(\"#FFFFFF\");\n  const [fontSize,setFontSize] = useState<number>(50);\n  const [componentRef,setComponentRef] = useState<React.RefObject<HTMLElement >|undefined>()\n  \n  let props: AppProps = { words: { words, setWords },\n  colors:{colors,setColors},\n  font:{font,setFont},\n  fontSize:{fontSize,setFontSize},\n  shape:{shape,setShape} ,\n  componentRef:{componentRef:componentRef as React.RefObject<HTMLElement>,setComponentRef},\n  bgColor:{color,setColor}\n}\n  return (\n    <Grid templateColumns=\"1fr .2fr\" minH=\"100vh\"  backgroundColor={\"gray.100\"} maxW=\"100vw\" maxH=\"100vh\">\n      <Left {...props}></Left>\n      <RightConfiguration {...props}></RightConfiguration>\n    </Grid>\n  );\n}\nfunction Left(props: AppProps) {\n  return <Grid w=\"full\" h=\"full\" maxH=\"100vh\" gridTemplateRows=\"2fr 1fr\">\n    <WordsDisplay {...props}></WordsDisplay>\n    <WordTable onChange={(w) => { props.words.setWords(w) }}></WordTable>\n  </Grid>\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { ChakraProvider } from '@chakra-ui/react';\n\nReactDOM.render(\n  <ChakraProvider>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </ChakraProvider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}